- id: '1697887163635'
  alias: Solcast update
  description: Update Solcast solar forecast
  trigger:
  - platform: time
    at: '23:00:00'
  - platform: time
    at: '12:00:00'
  - platform: time
    at: 04:00:00
  condition: []
  action:
  - service: solcast_solar.update_forecasts
    data: {}
  mode: single
- id: '1701901738658'
  alias: Solar - Battery Charge Automation
  description: Main automatic battery charging function
  trigger:
  - platform: time
    at: '23:05:00'
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: '{{ states(''sensor.solax_house_load_today'') }}'
    target:
      entity_id: input_number.expected_consumption
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - parallel:
    - service: number.set_value
      data:
        value: '{{ states(''sensor.soc_charge_end_time_hhmm'').split('':'')[0] }}'
      target:
        entity_id: number.solax_timed_charge_end_hours
    - service: number.set_value
      data:
        value: '{{ states(''sensor.soc_charge_end_time_hhmm'').split('':'')[1] }}'
      target:
        entity_id: number.solax_timed_charge_end_minutes
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: button.press
    data: {}
    target:
      entity_id: button.solax_update_charge_discharge_times
  mode: single
- id: '1701901762534'
  alias: Solar - Charge Current Settings
  description: This Automation automatically sets the Solax Timed Charge Current to
    match the user inputs of battery capacity, overdischarge soc and forcecharge soc
  trigger:
  - platform: state
    entity_id:
    - input_number.battery_capacity
    - input_number.overdischarge_soc
    - input_number.force_charge_soc
    - input_number.offpeak_window
  condition: []
  action:
  - service: number.set_value
    data:
      value: '{{ states(''sensor.calculated_charge_current'') }}'
    target:
      entity_id: number.solax_timed_charge_current
  mode: single
- id: '1701901781715'
  alias: Solar - Expected Consumption Low State Tracker
  description: If the number input number 'Expected Consumption' is overtaken by the
    Solis sensor 'Solax House Load Today', the value from the sensor is set to the
    number input to avoid peculiarities in battery SoC forecasting.
  trigger:
  - platform: state
    entity_id:
    - sensor.solax_house_load_today
  condition:
  - condition: numeric_state
    entity_id: sensor.solax_house_load_today
    above: input_number.expected_consumption
  action:
  - service: input_number.set_value
    data:
      value: '{{ states(''sensor.solax_house_load_today'') }}'
    target:
      entity_id: input_number.expected_consumption
  mode: single
- id: '1701901849760'
  alias: Solar - Restore Consumption Defaults
  description: Sets todays expected consumption and tomorrows expected consumption
    to 10, Target SoC to 4.5, base load to 0.23, and boost charge to 0
  trigger:
  - platform: state
    entity_id:
    - input_button.reset_consumption_defaults
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: 10
    target:
      entity_id: input_number.expected_consumption
  - service: input_number.set_value
    data:
      value: 10
    target:
      entity_id: input_number.expected_consumption_tomorrow
  - service: input_number.set_value
    data:
      value: 4.5
    target:
      entity_id: input_number.target_usable_soc
  - service: input_number.set_value
    data:
      value: 0.23
    target:
      entity_id:
      - input_number.base_load
  - service: input_number.set_value
    data:
      value: 0
    target:
      entity_id: input_number.boost_charge
  - service: number.set_value
    data:
      value: '55'
    target:
      entity_id: number.solax_timed_charge_current
  mode: single
- id: '1701901864598'
  alias: Solar - Update Times
  description: Manually updates Inverter Charge and Discharge Times from Solax Modbus
    Integration
  trigger: []
  condition: []
  action:
  - parallel:
    - service: number.set_value
      data:
        value: '{{ states(''sensor.soc_charge_end_time_hhmm'').split('':'')[0] }}'
      target:
        entity_id: number.solax_timed_charge_end_hours
    - service: number.set_value
      data:
        value: '{{ states(''sensor.soc_charge_end_time_hhmm'').split('':'')[1] }}'
      target:
        entity_id: number.solax_timed_charge_end_minutes
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: button.press
    data: {}
    target:
      entity_id:
      - button.solax_update_charge_discharge_times
  mode: single
- id: '1701901878676'
  alias: Solcast - API Poll Schedule
  description: New API call Solcast
  trigger:
  - platform: time
    at: 06:00:00
  - platform: time
    at: '10:00:00'
  - platform: time
    at: '14:00:00'
  - platform: time
    at: '18:00:00'
  - platform: time
    at: '23:00:00'
  condition: []
  action:
  - service: solcast_solar.update_forecasts
    data: {}
  mode: single
- id: '1737918637703'
  alias: Battery SOC Based V2L Control
  description: Controls V2L switch based on battery SOC with different thresholds
    for evening hours
  triggers:
  - entity_id: sensor.solax_battery_soc
    id: soc_trigger
    above: 20
    below: 80
    trigger: numeric_state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ evening_hours }}'
      sequence:
      - choose:
        - conditions:
          - condition: numeric_state
            entity_id: sensor.solax_battery_soc
            above: 19.9
            below: 40
          - condition: state
            entity_id: switch.v2l
            state: 'off'
          sequence:
          - target:
              entity_id: switch.v2l
            action: switch.turn_on
        - conditions:
          - condition: numeric_state
            entity_id: sensor.solax_battery_soc
            above: 39.9
          - condition: state
            entity_id: switch.v2l
            state: 'on'
          sequence:
          - target:
              entity_id: switch.v2l
            action: switch.turn_off
    - conditions:
      - condition: template
        value_template: '{{ not evening_hours }}'
      sequence:
      - choose:
        - conditions:
          - condition: numeric_state
            entity_id: sensor.solax_battery_soc
            above: 39.9
            below: 80
          - condition: state
            entity_id: switch.v2l
            state: 'off'
          sequence:
          - target:
              entity_id: switch.v2l
            action: switch.turn_on
        - conditions:
          - condition: numeric_state
            entity_id: sensor.solax_battery_soc
            above: 79.9
          - condition: state
            entity_id: switch.v2l
            state: 'on'
          sequence:
          - target:
              entity_id: switch.v2l
            action: switch.turn_off
  variables:
    evening_hours: '{{ now().hour >= 20 }}'
    current_soc: '{{ states(''sensor.solax_battery_soc'') | float }}'
- id: '1760173080569'
  alias: Battery Status Indicator
  description: ''
  triggers:
  - entity_id: sensor.solisac_battery_soc
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solisac_battery_soc
        above: 79.9
      sequence:
      - target:
          entity_id: light.battery_sensor
        data:
          rgb_color:
          - 0
          - 255
          - 0
          brightness_pct: 100
        action: light.turn_on
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solisac_battery_soc
        above: 59.9
        below: 80
      sequence:
      - target:
          entity_id: light.battery_sensor
        data:
          rgb_color:
          - 255
          - 255
          - 0
          brightness_pct: 100
        action: light.turn_on
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solisac_battery_soc
        above: 39.9
        below: 60
      sequence:
      - target:
          entity_id: light.battery_sensor
        data:
          rgb_color:
          - 255
          - 128
          - 0
          brightness_pct: 100
        action: light.turn_on
    default:
    - target:
        entity_id: light.battery_sensor
      data:
        rgb_color:
        - 255
        - 0
        - 0
        brightness_pct: 100
      action: light.turn_on
  mode: restart
