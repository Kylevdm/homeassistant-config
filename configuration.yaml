
# Loads default set of integrations. Do not remove.
default_config:

#advanced:
#  homeassistant_legacy_entity_attributes: false
#  homeassistant_legacy_triggers: false
#  legacy_api: false
#  legacy_availability_payload: false
#device_options:
#  legacy: false


# Text to speech
tts:
  - platform: google_translate

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

my:

sensor:
  - platform: average
    name: 'Average Upstairs Temperature'
    entities:
      - sensor.0xa4c138fb6e5add12_temperature
      - sensor.th_01_temperature
      - sensor.0xa4c138f24e1cef1e_temperature

template:
  - sensor:
      - name: "House Load"
        unique_id: house_load_power
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set solar = states('sensor.myenergi_harvi_13913276_generation_ct1') | float(0) %}
          {% set battery = states('sensor.myenergi_harvi_13913276_ac_battery_ct2') | float(0) %}
          {% set grid = states('sensor.myenergi_harvi_2639268_grid_ct1') | float(0) %}
          {{ (solar + battery + grid) | round(0) }}
  - sensor:
      - platform: statistics
        name: "House Load 7 Day Average"
        entity_id: sensor.house_load_daily
        state_characteristic: mean
        max_age:
          days: 7
          
  - sensor:
      - name: "Battery Power"
        unit_of_measurement: "W"
        state: >
          {{ (states('sensor.solisac_battery_voltage') | float) * 
             (states('sensor.solisac_bms_battery_current') | float) }}

  - sensor:
      # Current grid import (positive) or export (negative) in Watts
      - name: "Total Grid Load"
        unique_id: total_grid_load
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {{ states('sensor.myenergi_69_stirtingale_road_eddi_power_grid') | float(0) }}
      
      # Calculate available capacity for battery charging
      - name: "Available Battery Charge Capacity"
        unique_id: available_battery_charge_capacity
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        state: >
          {% set max_grid = 18000 %}
          {% set current_grid_import = states('sensor.myenergi_69_stirtingale_road_eddi_power_grid') | float(0) %}
          {% set battery_charging = states('sensor.battery_charge_power') | float(0) %}
          {% set available = max_grid - current_grid_import + battery_charging %}
          {{ [0, available] | max | round(0) }}
      
      # Determine charging phase based on SOC
      - name: "Battery Charge Phase"
        unique_id: battery_charge_phase
        state: >
          {% set soc = states('sensor.solisac_battery_soc') | float(0) %}
          {% if soc < 90 %}
            bulk
          {% elif soc < 95 %}
            absorption
          {% elif soc < 100 %}
            top_balance
          {% else %}
            complete
          {% endif %}
        icon: >
          {% set soc = states('sensor.solisac_battery_soc') | float(0) %}
          {% if soc < 90 %}
            mdi:battery-charging-50
          {% elif soc < 95 %}
            mdi:battery-charging-80
          {% elif soc < 100 %}
            mdi:battery-charging-90
          {% else %}
            mdi:battery
          {% endif %}
      
      # Calculate required charge to reach target SOC
      - name: "Battery Charge Needed"
        unique_id: battery_charge_needed
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: measurement
        state: >
          {% set current_soc = states('sensor.solisac_battery_soc') | float(0) %}
          {% set battery_capacity = 26.88 %}
          {% set target_soc = 95 if states('sensor.battery_charge_phase') != 'top_balance' else 100 %}
          {% set current_kwh = (current_soc / 100) * battery_capacity %}
          {% set target_kwh = (target_soc / 100) * battery_capacity %}
          {% set needed = target_kwh - current_kwh %}
          {{ [0, needed] | max | round(2) }}
      
      # Calculate time remaining in current cheap slot
      - name: "Cheap Slot Time Remaining"
        unique_id: cheap_slot_time_remaining
        unit_of_measurement: "h"
        device_class: duration
        state: >
          {% set now_time = now() %}
          {% set slot_end = today_at("05:00") %}
          {% if now_time > slot_end %}
            {% set slot_end = slot_end + timedelta(days=1) %}
          {% endif %}
          {% set remaining_seconds = (slot_end - now_time).total_seconds() %}
          {% set remaining_hours = remaining_seconds / 3600 %}
          {{ [0, remaining_hours] | max | round(2) }}
      
      # Calculate target Solis charge current (Phase 1: Solis only, no rectifier)
      - name: "Target Solis Charge Current"
        unique_id: target_solis_charge_current
        unit_of_measurement: "A"
        device_class: current
        state: >
          {% set phase = states('sensor.battery_charge_phase') %}
          {% if phase == 'bulk' %}
            62.5
          {% elif phase == 'absorption' %}
            31
          {% elif phase == 'top_balance' %}
            15
          {% else %}
            0
          {% endif %}
      
  - binary_sensor:
      # Detect if we're in a cheap rate slot
      - name: "Cheap Rate Active"
        unique_id: cheap_rate_active
        state: >
          {{ is_state('binary_sensor.octopus_energy_electricity_22l4386358_2200012282082_off_peak', 'on') 
             or is_state('binary_sensor.octopus_intelligent_slot', 'on') }}
        icon: >
          {% if is_state('binary_sensor.cheap_rate_active', 'on') %}
            mdi:cash-multiple
          {% else %}
            mdi:cash-off
          {% endif %}
      
      # Car is actively fast charging (>6.5kW)
      - name: "Car Fast Charging"
        unique_id: car_fast_charging
        state: >
          {{ states('sensor.myenergi_zappi_22300254_internal_load_ct1') | float(0) > 6500 }}
        icon: >
          {% if is_state('binary_sensor.car_fast_charging', 'on') %}
            mdi:ev-station
          {% else %}
            mdi:ev-plug-type2
          {% endif %}
      
      # V2L car is plugged in (for future Phase 2)
      - name: "V2L Car Connected"
        unique_id: v2l_car_connected
        state: >
          {{ not is_state('switch.v2l', 'unavailable') }}
        icon: >
          {% if is_state('binary_sensor.v2l_car_connected', 'on') %}
            mdi:car-electric
          {% else %}
            mdi:car-electric-outline
          {% endif %}
             
binary_sensor:
  - platform: template
    sensors:
      v2l_available:
        friendly_name: "V2L Car Connected"
        value_template: >
          {{ not is_state('switch.v2l', 'unavailable') }}
